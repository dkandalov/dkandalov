---
layout: post
title:  "ACCU 2016"
date:   2016-05-01 10:57:48 +0100
categories: accu conference
---

This year I attended [ACCU conference](http://accu.org/index.php/conferences/accu_conference_2016) in Bristol.
Below you can find some tweet-size notes I made during the conference.
Most of the sessions at the conference were filmed so I attached available youtube videos.
I'll update the blog when more videos are published.

If you haven't been to ACCU conference, I do recommend you try it.
It has emphasis on C++ but other languages and technologies are welcome.
Because of C++ focus, most of the attendees are much more experienced compared to other conferences.
Therefore, it's a great opportunity to learn.
ACCU conference has schedule prepared in advance but it feels a bit like open-space conference
where you're welcome to start talking to anyone.


#### A Glimpse of Trygve: From Class-oriented Programming to Real OO - [Jim Coplien](https://twitter.com/jcoplien)

The talk was along the lines of [The DCI Architecture](http://www.artima.com/articles/dci_vision.html)
but using Trygve programming language as an example.
To be honest I still don't quite understand DCI so hopefully playing with actual
programming language will make it more clear.
This is the [Github project](https://github.com/jcoplien/trygve) for Trygve programming language.

- OO is about objects not classes. Most of the modern "Object Oriented" languages are really "Class Oriented".
- Architecture happens is at **runtime**, classes, etc. is scaffolding for runtime behaviour.
- Project value is in delivering use-cases.
- Use-case change rate is usually faster than changes in data.
  Therefore, it doesn't always make sense to combine use-cases and data in classes.
- Model in MVC (and similar patterns) is human **mental model**.
- Micro-services don't necessarily solve the most important problem of semantically breaking down project.

Amazing sketchnote by [Michel Grootjans](https://twitter.com/michelgrootjans):
![](../assets/images/2016-05-01/trygve.png)

Video:
<p align="center">
	<iframe width="560" height="315" src="https://www.youtube.com/embed/lQQ_CahFVzw" frameborder="0" allowfullscreen></iframe>
</p>


#### How I Went from C++ Programmer to Running My Own Software Product Company (and you can too) - [Andy Brice](https://successfulsoftware.net/)

In this talk Andy Brice told a story of how he set up his own product-oriented company
and what he learned from this experience over the last 10+ years.
It was very insightful and interesting talk showing how far seemingly niche
[table planning piece of software](http://www.perfecttableplan.com) can take you if it's done well.

- Success = idea * (execution<sup>2</sup>), i.e. ideas are cheap, execution is crucial.
- Narrow product which does only one thing is good because internet is BIG and small niche is big enough.
- Product won't sell itself, examples like Minecraft are outliers. "Word of month" is **very** slow.
- Amount of marketing required for developing software product is larger than writing software itself.
- The biggest challenge is getting noticed.
- Typical website conversion rate:
	- for well targeted visitors - 1%
	- untargeted - 0.00038%
- Don't worry too much about competition. No competitions means there is no market.
- Have free trial version.
- The first two minutes of using software is vital. Do UX testing! Actually watch someone using it.
- Don't have a free version of software. If it's good, everyone will use it. If it's not good, nobody will buy full version.


#### Waltzing with Branches - [Chris Oldwood](http://chrisoldwood.blogspot.co.uk/)

This talk was partially based on ACCU journal [Branching Strategies](http://accu.org/index.php/journals/1920) article.
The most interesting idea for me was to think about branching strategies in terms of
project risk management (see [Waltzing With Bears book](http://www.amazon.com/Waltzing-With-Bears-Managing-Software/dp/0932633609))
rather than purely software.

- Cargo cult for Google development process. Practices which are useful for Google are no not necessarily useful on you project.
- Branches exist to mitigate perceived risks:
	- Loss of productivity because of broken trunk.
	- Loss of confidence because of project code quality, people.
- **Merge debt** - amount of effort/commits required to merge trunk and all branches under active development.
- "Advanced monitoring is indistinguishable from testing".

Amazing sketchnote by [Michel Grootjans](https://twitter.com/michelgrootjans):
![](../assets/images/2016-05-01/waltzing-with-branches.png)

Video:
<p align="center">
	<iframe width="560" height="315" src="https://www.youtube.com/embed/gYhndMJEbpg?list=PL9hrFapz4dsObkSjgBlyFl-aotNvk2GeP" frameborder="0" allowfullscreen></iframe>
</p>


#### How to Evolve Your Way Out of a Paper Bag - [Frances Buontempo](https://twitter.com/fbuontempo)

Genetic algorithms, cellular automata and combination of the two.

http://accu.org/index.php/journals/1821
https://github.com/doctorlove/paperbag/tree/master/ga

https://github.com/doctorlove/paperbag/tree/master/evolve/Evolution

Video:
<p align="center">
	<iframe width="560" height="315" src="https://www.youtube.com/embed/vhhS_MYViW4?list=PL9hrFapz4dsObkSjgBlyFl-aotNvk2GeP" frameborder="0" allowfullscreen></iframe>
</p>


#### Declarative Thinking, Declarative Practice - [Kevlin Henney](https://twitter.com/KevlinHenney)
<p align="center">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/nrVIlhtoE3Y?list=PL9hrFapz4dsM1B9bI8VmEE4JJlR0m-dvo" frameborder="0" allowfullscreen></iframe>
</p>


#### Balancing Bias in Software Development - [Marian Petre](http://mcs.open.ac.uk/mp8)
- [Cognitive strain/ease](https://www.nngroup.com/articles/navigation-cognitive-strain/)
- Biases exist to conserve mental energy.
	- [Anchoring](https://en.wikipedia.org/wiki/Anchoring)
	- [Confirmation bias](https://en.wikipedia.org/wiki/Confirmation_bias)
	- [Status quo bias](https://en.wikipedia.org/wiki/Status_quo_bias)
	- [Overconfidence_effect](https://en.wikipedia.org/wiki/Overconfidence_effect)
	- [Dunningâ€“Kruger effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect)

- Experts use practices to overcome biases, e.g. to avoid anchoring bias double estimate and multiply by 10 or use planning poker.
- Experts make more mistakes but have better tools to find them fast.


#### Lightning talks
Guess the fruit


#### Good to see you
TODO